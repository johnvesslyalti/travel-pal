generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// USER MANAGEMENT & AUTHENTICATION
// =============================================

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String?
  image         String?
  emailVerified Boolean          @default(false) // mapped from datetime → boolean
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  preferences   UserPreferences?
  accounts      Account[]
  sessions      Session[]
  itineraries   Itinerary[]
  feedback      Feedback[]
  subscriptions Subscription[]

  @@map("users")
}

model Account {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  providerId            String?   @map("provider") // mapped
  accountId             String?   @map("providerAccountId") // mapped
  refreshToken          String?  @map("refresh_token")
  accessToken           String?  @map("access_token")
  accessTokenExpiresAt  DateTime? @map("expires_at") // mapped from int → datetime
  idToken               String?  @map("id_token")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  token     String?   @map("sessionToken")
  expiresAt DateTime? @map("expires")
  userId    String?  @map("user_id")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  ipAddress String?
  userAgent String?

  @@unique([token])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// =============================================
// USER PREFERENCES & PROFILE
// =============================================

model UserPreferences {
  id                   String      @id @default(cuid())
  userId               String      @unique @map("user_id")
  preferredBudget      BudgetRange @default(MID_RANGE)
  travelStyle          TravelStyle @default(BALANCED)
  interests            String[]
  dietaryRequirements  String[]
  mobilityRequirements String[]
  preferredLanguage    String      @default("en")
  currency             String      @default("USD")
  emailNotifications   Boolean     @default(true)
  pushNotifications    Boolean     @default(true)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @default(now()) @updatedAt
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// =============================================
// ITINERARY MANAGEMENT
// =============================================

model Itinerary {
  id             String          @id @default(cuid())
  userId         String          @map("user_id")
  title          String
  destination    String
  country        String?
  city           String?
  coordinates    String?
  startDate      DateTime        @map("start_date")
  endDate        DateTime        @map("end_date")
  duration       Int
  budget         Float?
  budgetRange    BudgetRange     @default(MID_RANGE)
  groupSize      Int             @default(1)
  travelStyle    TravelStyle     @default(BALANCED)
  interests      String[]
  aiPrompt       String?         @db.Text
  aiModel        String?         @default("gemini-pro")
  generationTime Int?
  summary        String?         @db.Text
  highlights     String[]
  estimatedCost  Float?
  status         ItineraryStatus @default(DRAFT)
  isPublic       Boolean         @default(false)
  shareToken     String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  days           ItineraryDay[]
  feedback       Feedback[]

  @@map("itineraries")
}

model ItineraryDay {
  id            String     @id @default(cuid())
  itineraryId   String     @map("itinerary_id")
  dayNumber     Int
  date          DateTime
  title         String?
  summary       String?    @db.Text
  estimatedCost Float?
  weather       Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  itinerary     Itinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  activities    Activity[]

  @@unique([itineraryId, dayNumber])
  @@map("itinerary_days")
}

model Activity {
  id              String       @id @default(cuid())
  dayId           String       @map("day_id")
  title           String
  description     String?      @db.Text
  category        ActivityCategory
  location        String?
  coordinates     String?
  placeId         String?
  startTime       String?
  endTime         String?
  duration        Int?
  order           Int
  estimatedCost   Float?
  currency        String       @default("USD")
  bookingUrl      String?
  bookingRequired Boolean      @default(false)
  tips            String?      @db.Text
  website         String?
  phone           String?
  rating          Float?
  reviewCount     Int?
  isCompleted     Boolean      @default(false)
  userNotes       String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  day             ItineraryDay @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// =============================================
// FEEDBACK & ANALYTICS
// =============================================

model Feedback {
  id           String           @id @default(cuid())
  userId       String           @map("user_id")
  itineraryId  String?          @map("itinerary_id")
  rating       Int
  comment      String?          @db.Text
  category     FeedbackCategory
  aiQuality    Int?
  usability    Int?
  accuracy     Int?
  improvements String[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  itinerary    Itinerary?       @relation(fields: [itineraryId], references: [id], onDelete: SetNull)

  @@map("feedback")
}

// =============================================
// SUBSCRIPTION & BILLING
// =============================================

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @map("user_id")
  planType             PlanType
  status               SubscriptionStatus
  stripeCustomerId     String?            @unique @map("stripe_customer_id")
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  stripePriceId        String?            @map("stripe_price_id")
  itinerariesUsed      Int                @default(0)
  itinerariesLimit     Int                @default(5)
  startDate            DateTime           @default(now()) @map("start_date")
  endDate              DateTime?          @map("end_date")
  canceledAt           DateTime?          @map("canceled_at")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// =============================================
// CACHED DATA & PERFORMANCE
// =============================================

model CachedLocation {
  id           String   @id @default(cuid())
  name         String
  country      String
  city         String?
  placeId      String?  @unique
  coordinates  String?
  placesData   Json?
  weatherData  Json?
  popularTimes Json?
  lastUpdated  DateTime @default(now())
  expiresAt    DateTime
  hitCount     Int      @default(0)

  @@map("cached_locations")
}

model AiUsage {
  id             String   @id @default(cuid())
  userId         String?  @map("user_id")
  model          String
  promptTokens   Int?
  responseTokens Int?
  totalTokens    Int?
  cost           Float?
  endpoint       String?
  responseTime   Int?
  success        Boolean  @default(true)
  errorMessage   String?
  createdAt      DateTime @default(now())

  @@map("ai_usage")
}

// =============================================
// ENUMS
// =============================================

enum BudgetRange {
  ULTRA_BUDGET
  BUDGET
  MID_RANGE
  LUXURY
  ULTRA_LUXURY
}

enum TravelStyle {
  ADVENTURE
  CULTURAL
  RELAXED
  FOODIE
  NIGHTLIFE
  FAMILY
  ROMANTIC
  BUSINESS
  SOLO
  BALANCED
}

enum ActivityCategory {
  SIGHTSEEING
  RESTAURANT
  ENTERTAINMENT
  SHOPPING
  TRANSPORTATION
  ACCOMMODATION
  ACTIVITY
  MUSEUM
  PARK
  BEACH
  NIGHTLIFE
  CULTURAL
  ADVENTURE
  WELLNESS
  BUSINESS
  OTHER
}

enum ItineraryStatus {
  DRAFT
  GENERATING
  COMPLETED
  SHARED
  ARCHIVED
  FAILED
}

enum FeedbackCategory {
  ITINERARY_QUALITY
  USER_EXPERIENCE
  BUG_REPORT
  FEATURE_REQUEST
  GENERAL
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
